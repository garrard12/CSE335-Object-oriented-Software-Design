/**
 * @file CityReport.h
 *
 * @author Charles B. Owen
 *
 * The city report is generated by the members of the city.
 * It is a collection of objects of type MemberReport.
 */

#pragma once

#include <memory>
#include <vector>
#include <random>
#include <list>

class City;
class MemberReport;

/**
 * The city report is generated by the members of the city.
 * It is a collection of objects of type MemberReport.
*/
class CityReport
{
private:
    /// The city this report is for
    City* mCity;

protected:
    /// Size of the bins in the linked list
    static const int BinSize = 7;

    /// A bin stores up to 7 city reports in a
    /// single linked list node.
    class ReportsBin {
    public:
        /// A place to store the reports in this bin
        /// Up to 7 reports can be stored, followed by
        /// a null pointer after the last report pointer.
        std::shared_ptr<MemberReport> mReports[BinSize+1];

        bool IsFull();
        void Add(std::shared_ptr<MemberReport> report);
    };

    /// The collection of reports
    std::list<std::shared_ptr<ReportsBin>> mReportBins;

public:
    explicit CityReport(City* city);

    void Add(std::shared_ptr<MemberReport> report);

	/**
	 * Iterator that iterates over some collection
	 */
	class Iter
	{
	public:
		/**
		 * Constructor
		 *
		 * @param collection collection of cityReport
		 * @param listPos Iterator of list ReportBins
		 * @param pos position in the SSL
		 */
		Iter(CityReport *collection, std::list<std::shared_ptr<ReportsBin>>::iterator listPos, int pos) :
		mCityReport(collection), mListPos(listPos), mPos(pos) {}

		/**
		 * Compare two iterators
		 * @param other The other iterator we are comparing to
		 * @return  true if this position is not equal to the other position
		*/
		bool operator!=(const Iter &other) const
		{
			return mPos != other.mPos ||  mListPos != other.mListPos;
		}

		/**
		 * Get value at current position
		 * @return Value at mPos in the collection
		 */
		std::shared_ptr<MemberReport> operator *() const {return (*mListPos)->mReports[mPos];}

		/**
		 * Increment the iterator, moving to the next item in the collection
		 * @return Reference to this iterator
		 */
		const Iter& operator++()
		{
			mPos++;
			//This is the thing that we need to check for
			if((*mListPos)->mReports[mPos] == nullptr)
			{
				mListPos++;
				mPos = 0;
			}
			return *this;
		}

	private:
		CityReport* mCityReport;   ///< CityReport we are iterating over
		std::list<std::shared_ptr<ReportsBin>>::iterator mListPos;   ///< Position in the collection
		int mPos = 0;			///< The position in the in reportBin
	};

	/**
	* Get an iterator for the beginning of the collection
	* @return Iter object at position 0
	*/
	Iter begin() { return Iter(this, mReportBins.begin(),0); }

	/**
     * Get an iterator for the end of the collection
     * @return Iter object at position past the end
     */
	Iter end() { return Iter(this, mReportBins.end(),0); }

};

